## Precision file for SONG intended to quickly compute the intrinsic bispectrum
## and to explain the precision parameters.


# =============================================================================
# =                            Multipole sampling                             =
# =============================================================================

# Setting l_max_scalars=100 results in an extremely low angular
# resolution and an extremely quick run
# originally l_max_scalars = 100 w/ k_max_tau0_over_l_max = 20
l_max_scalars = 100
#l_logstep = 1.15
l_logstep = 2.5
#l_logstep = 1.2
l_linstep = 50



# =============================================================================
# =                          First-order k-sampling                           =
# =============================================================================

## These settings affect the computation of the first-order C_l and P(k).
## The first-order quadratic sources used in the second-order system are
## computed in the same k-sampling as the second-order system.

## Settings for about 10% precision of fnl_intrinsic
#k_min_tau0 = 0.05
#k_max_tau0_over_l_max = 2.8
#k_max_tau0_over_l_max = 2800
#k_max_tau0_over_l_max = 75.
k_max_tau0_over_l_max = 40
#k_max_tau0_over_l_max = 20

#ppt->k_size = 1481
k_step_sub = 0.025
k_logstep_super = 2.0
k_step_super = 0.025
k_step_transition = 0.2

#ppt->k_size ~ 4500
#k_step_sub = 0.002
#k_logstep_super = 1.2
#k_step_super = 0.002
#k_step_transition = 0.05





#k_per_decade_for_bao = 50


#k_per_decade_for_pk = 500
k_per_decade_for_pk = 1000


## the actual k max (ignores all others)
#k_max_for_pk = 0.00143145
#k_max_for_pk =0.783619
#k_max_for_pk = 0.636253

#k_max_for_pk =1.0554
#k_max_for_pk =1.0654
#k_max_for_pk = 1.29628
#k_max_for_pk = 2.0
#k_max_for_pk =1.0754
#k_max_for_pk = 1.1
#k_max_for_pk = 0.63613
#k_max_for_pk = 4.23575
#k_max_for_pk = 2.0



## Quick debug
# k_min_tau0 = 0.05
# k_max_tau0_over_l_max = 2
# k_step_sub = 3
# k_step_super = 1
# k_logstep_super = 20
# k_step_transition = 0.2

## Permillish precision on the local template f_nl
# k_min_tau0 = 0.05
# k_max_tau0_over_l_max = 2.8
# k_step_sub = 0.1
# k_step_super = 0.0015
# k_logstep_super = 1.4
# k_step_transition = 0.2


# =============================================================================
# =                          Second-order k-sampling                          =
# =============================================================================

## Second-order type of sampling for k (lin, log, class, smart)
sources2_k_sampling = smart

## Settings for about 10% precision
k_min_tau0_song = 0.1
#k_min_tau0_song = 0.05
#k_max_tau0_over_l_max_song = 250
#k_max_tau0_over_l_max_song = 100

#k_max_tau0_over_l_max_song = 23 (was working well for l_max_scalars = 400)
k_max_tau0_over_l_max_song = 90
#k_max_tau0_over_l_max_song = 23
#k_max_tau0_over_l_max_song = 8
#k_max_tau0_over_l_max_song = 15.1
#k_max_tau0_over_l_max_song = 180

#22.03.21 (lower precision ppt->k_size[scalars] = 87)
k_step_sub_song = 0.3
k_step_super_song = 0.025
k_logstep_super_song = 1.8
k_step_transition_song = 0.2

#higher precision
#k_step_sub_song = 0.05
#k_step_super_song = 0.005
#k_logstep_super_song = 1.007
#k_step_transition_song = 0.05

## Quick debug
# k_min_tau0_song = 0.1
# k_max_tau0_over_l_max_song = 1
# k_step_sub_song = 1
# k_step_super_song = 0.5
# k_logstep_super_song = 1.5
# k_step_transition_song = 0.2



# =============================================================================
# =                         Second-order k3-sampling                          =
# =============================================================================

## Second-order sampling for k3 (lin, log, smart, angle)
sources2_k3_sampling = smart
#k3_size_min = 5
k3_size_min = 1



# =============================================================================
# =                         Transfer function sampling                        =
# =============================================================================

## Second-order k-sampling for the transfer functions
#q_linstep = 0.4
q_linstep = 0.8
q_linstep_song = 0.8
#q_linstep_song = 0.4
transfer2_k3_sampling = smart



# =============================================================================
# =                              Interpolation                                =
# =============================================================================

## Interpolation parameters
quadsources_time_interpolation = cubic
sources_time_interpolation = linear
bessels_interpolation = cubic
sources_k3_interpolation = linear
transfers_k1_interpolation = linear
transfers_k2_interpolation = linear



# =============================================================================
# =                              Time sampling                                =
# =============================================================================

## When to start evolving the second-order system? Set to zero to choose automatically.
tau_start_evolution_song = 0

## If the above is zero, use the following parameters to determine when to start
## integrating the system. Decrease them to start earlier.
start_small_k_at_tau_c_over_tau_h_song = 0.001
start_large_k_at_tau_h_over_tau_k_song = 0.04

## Time sampling of the quadratic sources (overridden if using custom time sampling
## for quadsources)
#perturb_sampling_stepsize_for_quadsources = 0.03
perturb_sampling_stepsize_for_quadsources = 0.005

## Custom timesampling for the quadratic sources
custom_time_sampling_for_quadsources = no
custom_tau_ini_quadsources = 0.1                # must be smaller than tau_ini_2nd_order_sources (best: 0.1)
custom_tau_end_quadsources = 1000               # enter 0 to save sources up to today (best: 550)
custom_tau_size_quadsources = 1000
custom_tau_mode_quadsources = log               # either lin, log or class (best: log)

## Timesampling for the first-order line-of-sight sources
start_sources_at_tau_c_over_tau_h = 0.01
perturb_sampling_stepsize = 0.1

## Time sampling of the second-order line-of-sight sources (overridden if using custom
## time sampling for LOS sources)
perturb_sampling_stepsize_song = 0.4
perturb_sampling_late_time_boost = 16
recombination_max_to_end_ratio = 250

## Custom timesampling for the second-order line-of-sight sources
custom_time_sampling_song_sources = no
custom_tau_ini_song_sources = 0.5            # must be larger than tau_ini_quadsources
custom_tau_end_song_sources = 1000              # enter 0 to save sources up to today
custom_tau_size_song_sources = 500
custom_tau_mode_song_sources = log             # either lin, log or class

## Integration grid in time for the second-order transfer functions
transfer2_tau_sampling = sources



# =============================================================================
# =                           Boltzmann hierarchies                           =
# =============================================================================

## Second-order Boltzmann hierarchies
l_max_g_song = 12
l_max_ur_song = 12
l_max_pol_g_song = 12

l_max_g_quadsources = -1
l_max_ur_quadsources = -1
l_max_pol_g_quadsources = -1

## How many multipoles to include in the line of sight sources
l_max_los_t = 5
l_max_los_p = 5
l_max_los_quadratic_t = 5
l_max_los_quadratic_p = 5

# First-order hierarchies
l_max_g = 15
l_max_pol_g = 15
l_max_ur = 15



# =============================================================================
# =                          Bispectrum integration                           =
# =============================================================================

# Integration of the bispectrum along the r-direction.
#
#  - If bispectra_r_sampling=custom, then r will be linearly sampled r_size
# times between r_min and r_right.
#
#  - If bispectra_r_sampling=centred, then r will be linearly sampled r_size
# times between (tau0-tau_rec)-tau_rec*r_left and (tau0-tau_rec)+tau_rec*r_right.
#
#  - If bispectra_r_sampling=sources, then r will have the same sampling as the
# line of sight sources up to (tau0-tau_rec)-tau_rec*r_left; after that, r will
# be sampled linearly until (tau0-tau_rec)+tau_rec*r_right with r_size points,
# unless r_size=-1, in which case the step of the linear sampling will be
# the same as that of the sources at recombination (usually very small).
#
# This choice is justified by the fact that the transfer functions in the
# bispectrum integral are peaked at recombination which, due to the presence
# of the Bessel functions with argument k*r and k*(tau0-tau), makes the
# integrand function peaked at r=tau0-tau. See documentation of
# bispectra_get_r_grid() for details.

bispectra_r_sampling = sources
#r_size = 50
r_left = 1
r_right = 1


## Extrapolation of the transfer functions for the bispectrum integration;
## choose between no_extrapolation and flat_extrapolation.
bispectra_k3_extrapolation = flat_extrapolation
extra_k3_oscillations_right = 50
extra_k3_oscillations_left = 50

## Bispectrum interpolation in (l1,l2,l3)
bispectra_interpolation = mesh_2d



# =============================================================================
# =                                  Lensing                                  =
# =============================================================================

l_switch_limber = 10 # set to 10 to match CAMB
accurate_lensing = 1
num_mu_minus_lmax = 150
delta_l_max = 250



# =============================================================================
# =                              Bessel functions                             =
# =============================================================================

## Linear step dx when sampling the projection functions for the second-order
## line of sight integral (see eq. 5.95 and 5.97 of http://arxiv.org/abs/1405.2280)
bessel_x_step_song = 0.1

# Set Bessels to zero if they are smaller than this.
bessel_j_cut_song = 1.e-15

# Set J_Llm(x) function to zero if it is smaller than this.
# Note that setting a high value for bessel_J_cut_song does affect
# the J's too. A rule of thumb is to set bessel_j_cut_song 5 orders
# of magnitude smaller than bessel_J_cut_song
bessel_J_cut_song = 1.e-10

## Spherical Bessel functions at 1st-order
bessel_x_step = 0.1
bessel_j_cut = 1.e-10
bessel_tol_x_min = 1.e-4



# =============================================================================
# =                           Differential system                             =
# =============================================================================

tol_perturb_integration_song = 1e-4
tol_perturb_integration = 1e-5



# =============================================================================
# =                              Approximations                               =
# =============================================================================

## Decide which approximation schemes to use in CLASS and in SONG.
## The following snippet from perturbations.h shows the possible choices. The
## position in the list correspond to the number of the approximation scheme
## (starting from 0).
enum tca_method {first_order_MB,first_order_CAMB,first_order_CLASS,second_order_CRS,second_order_CLASS,compromise_CLASS,tca_none};
enum rsa_method {rsa_null,rsa_MD,rsa_MD_with_reio,rsa_none};
enum ufa_method {ufa_mb,ufa_hu,ufa_CLASS,ufa_none};
enum ncdmfa_method {ncdmfa_mb,ncdmfa_hu,ncdmfa_CLASS,ncdmfa_none};

## Same for the second-order perturbations. The only approximation that is
## implemented is the no radiation approximation, described below.
enum tca2_method {tca2_none, tca2_zero};
enum rsa2_method {rsa2_none};
enum ufa2_method {ufa2_none};
enum nra2_method {nra2_none, nra2_all, nra2_fluid};

# -------------------------------------------------------------------
# -                   Tight coupling approximation                  -
# -------------------------------------------------------------------

## TCA at first order.
## In SONG, we have added the option to turn off the tight coupling
## approximation by setting the below parameter to 6.
tight_coupling_approximation = 5
tight_coupling_trigger_tau_c_over_tau_h = 0.01
tight_coupling_trigger_tau_c_over_tau_k = 0.007

## TCA at second order. Set to zero for no TCA, to one for the
## TCA1 scheme in Pitrou 2011, adapted to second order.
tight_coupling_approximation_song = 1
tight_coupling_trigger_tau_c_over_tau_h_song = 0.01
tight_coupling_trigger_tau_c_over_tau_k_song = 0.007


# -------------------------------------------------------------------
# -                Radiation streaming approximation                -
# -------------------------------------------------------------------

## First order.
## The RSA substitutes the crazy oscillations of the photon & neutrino moments
## at late times (after photon decoupling, inside the Hubble radius) with their
## average (see sec. 4 of Blas, Lesgourgues & Tram 2011).
## To turn off the rsa approximation, set radiation_streaming_approximation = 3.
## This is not very useful, though, since the result will just be a big mess
## at late times for all photon & neutrino multipoles.  Probably, that won't affect
## the results, but it is unnecessary to compute all those oscillations, and anyway
## your sampling won't be fine enough to get them..
## It is also good to keep the RSA approximation because it relieves the truncation
## effects.  We know that the reflection effects get worse and worse with time,
## so using RSA from a certain point avoids this issue.
radiation_streaming_approximation = 2 # set to 3 to disable RSA
radiation_streaming_trigger_tau_over_tau_k = 45
radiation_streaming_trigger_tau_c_over_tau = 5

## Second order.
## Note that the above flag radiation_streaming_trigger_tau_c_over_tau affects also
## the 2nd-order RSA as it is used in the thermodynamics module to determine the
## start of the free streaming regime. Therefore, we automatically set the variable
## in CLASS to match whatever we choose in SONG.
radiation_streaming_approximation_song = 2
radiation_streaming_trigger_tau_over_tau_k_song = 45
radiation_streaming_trigger_tau_c_over_tau_song = 5


# -------------------------------------------------------------------
# -              Ultra relativistic fluid approximation             -
# -------------------------------------------------------------------

## First order.
## The UFA approximation is similar to a radiation streaming approximation that works for
## even before and during photon decoupling. To turn it off, set it to 3 or increase the
## ur_fluid_trigger_tau_over_tau_k to a very high number (e.g. 10000). If you turn off the
## ufa, and do not use a high l_max_ur (>100), be prepared to have numerical noise such as
## the red curve in fig. 6 of Blas et al. 2010.
ur_fluid_approximation = 2 # set to 3 to disable
ur_fluid_trigger_tau_over_tau_k = 30

## Second order (NOT IMPLEMENTED YET)
ur_fluid_approximation_song = 0
ur_fluid_trigger_tau_over_tau_k_song = 30


# -------------------------------------------------------------------
# -                   No radiation approximation                    -
# -------------------------------------------------------------------

## Second order.
## This is the poor's man RSA approximation at second order. Stop evolving the radiation
## species (photon temperature and polarization, neutrinos) after the radiation density is
## below a certain treshold with respect to the matter density. Turn on this approximation
## if you are not interested into radiation multipoles today. This approximation does not
## affect sources that are located at recombination.
no_radiation_approximation_song = 0
no_radiation_approximation_rho_m_over_rho_r_song = 100
