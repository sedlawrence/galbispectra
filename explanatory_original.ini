----------------------------
---->       Cosmology
----------------------------

output = tCl, pCl, nCl, lCl, tCl2, mPk, mTk
bispectrum_types = local
store_run = no
run_directory = logs/test_1234
add_quadratic_correction = yes
ignored_fields_in_fisher =
compute_lensing_variance_lmax = no

## Choose azimuthal number
modes_2nd_order = 0,1,2

## Planck+WP+highL+BAO - Planck paper XVI, 2013
h = 0.6777
T_cmb = 2.7255
omega_b = 0.022161
omega_cdm = 0.11889
N_eff = 3.04
Omega_k = 0.
reio_parametrization = reio_camb
tau_reio = 0.0952
k_pivot = 0.05
A_s = 2.2138e-9
n_s = 0.9611
r_min = 12500
r_max = 15500
r_size = 250

## Analytical in Huang & Vernizzi
# h = 0.6
# T_cmb = 2.726
# Omega_b = 0.15
# Omega_cdm = 0.85
# N_eff = 3.04
# Omega_k = 0.
# reio_parametrization = reio_none
# tau_reio = 0.
# k_pivot = 0.002
# A_s = 2.4e-9
# n_s = 0.97
# r_min = 8700
# r_max = 10700
# r_size = 200

# Antony comparison ?
# h = 0.6777
# T_cmb = 2.7255
# omega_b = 0.022161
# omega_cdm = 0.11889
# N_eff = 0
# Omega_k = 0.
# reio_parametrization = reio_none

## WMAP 9 (Hinshaw et al. 2012, Table 2)
# h = 0.697
# T_cmb = 2.72548
# omega_b = 0.02240
# omega_cdm = 0.1146
# N_eff = 3.04
# Omega_k = 0.
# reio_parametrization = reio_camb
# tau_reio = 0.08
# k_pivot = 0.002
# A_s = 2.43e-9
# n_s = 0.9646
# alpha_s = 0.
# r_min = 13000
# r_max = 15000
# r_size = 150

## WMAP 7
# h = 0.704
# T_cmb = 2.726
# Omega_b = 0.0455
# Omega_cdm = 0.228
# N_eff = 3.04
# Omega_k = 0.
# reio_parametrization = reio_camb
# tau_reio = 0.088
# k_pivot = 0.002
# A_s = 2.43e-9
# n_s = 0.967
# alpha_s = 0.
# r_min = 13500
# r_max = 15500
# r_size = 150

## CPL in CMBquick (no neutrinos)
# h = 0.719
# T_cmb = 3.085
# Omega_b = 0.043969
# Omega_cdm = 0.21253
# N_eff = 0.
# Omega_k = 0.
# reio_parametrization = reio_camb
# # tau_reio = 0.087
# z_reio = 11.045
# k_pivot = 0.002
# A_s = 2.41e-9
# n_s = 0.963
# alpha_s = 0.


# ====================
# = Noise parameters =
# ====================

# Specify the experiment's noise in microK per pixel and the FWHM beam in arcminutes.
# Typical values for Planck are noise_t = 6, noise_e = 12, beam_fwhm = 7.
# With respect CAMB's noise, our noise is given by
# noise_camb = (noise * beam_fwhm_radians)^2 = (noise * beam_fwhm/60*pi/180)^2
# so that the typical Planck noise for temperature in CAMB would be 2e-4.

# PRISM experiment, Table I of http://arxiv.org/abs/1310.1554, for the frequencies
# 105, 135, 160, 185, 200, 220, 265, 300, 320, 395, 460, 555, 660. For the noise, we
# take sigma/sqrt(n_det).
# experiment_beam_fwhm =  4.8,   3.8,   3.2,   2.8,   2.5,   2.3,   1.9,   1.7,   1.6,   1.3,   1.1,  0.92,  0.77
# experiment_noise_t =   2.88,  2.59,  2.43,  2.51,  2.59,  2.72,  3.12,  3.58,  3.91,  5.71,  8.33,  17.1,  40.4
# experiment_noise_e =   4.07,  3.66,  3.43,  3.55,  3.66,  3.84,  4.42,  5.07,  5.50,  8.07,  11.8,  24.2,  57.1
# experiment_noise_r =     -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5.71,    -1,    -1,    -1
# experiment_f_sky = 1
# l_max_scalars = 3000

# PRISM experiment, Table I of http://arxiv.org/abs/1310.1554, for the frequencies
# 105, 135, 160, 185, 200, 220, 265. For the noise, we take sigma/sqrt(n_det).
# experiment_beam_fwhm =  4.8,   3.8,   3.2,   2.8,   2.5,   2.3,   1.9
# experiment_noise_t =   2.88,  2.59,  2.43,  2.51,  2.59,  2.72,  3.12
# experiment_noise_e =   4.07,  3.66,  3.43,  3.55,  3.66,  3.84,  4.42
# experiment_noise_r =     -1,    -1,    -1,    -1,    -1,    -1,    -1
# experiment_f_sky = 1
# l_max_scalars = 3000

# COrE experiment, Table I of http://arxiv.org/abs/1102.2181 (105, 135, 165, 195, 225, 255, 285 GhZ)
# experiment_beam_fwhm =  10.0,   7.8,   6.4,   5.4,   4.7,  4.1,  3.7
# experiment_noise_t =    2.68,  2.63,  2.67,  2.63,  2.64, 6.08, 10.1
# experiment_noise_e =    4.63,  4.55,  4.61,  4.54,  4.57, 10.5, 17.4
# experiment_f_sky = 1
# l_max_scalars = 3000

# Planck experiment. Actual values from the Planck Explanatory Supplement pag. 35 (100, 143, 217, 353 Ghz),
# multiplied by T_cmb=2.7255. To be updated when Planck2 comes out (for now, the noise on
# polarisation is taken as two times the temperature noise, because only half of the detectors
# in Planck have polarization).
# experiment_beam_fwhm =  9.66,   7.27,     5.01,    4.86
# experiment_noise_t =   10.77,    6.4,    12.48,   41.35
# experiment_noise_e =   21.54,   12.8,    24.96,   82.70
# experiment_noise_r =      -1,     -1,       -1,   41.35
# experiment_f_sky = 1
# l_max_scalars = 2500

# PLANCK 143GHZ, equivalent to CAMB's 7.27,1.8318e-4,5.8121e-4
# experiment_beam_fwhm = 7.27
# experiment_noise_t = 6.4
# experiment_noise_e = 11.4
# experiment_f_sky = 1
# l_max_scalars = 2500

# WMAP3 experiment (Smith et al. 2011, Table I)
# experiment_beam_fwhm = 28,20,12
# experiment_noise_t = 16.4,28,56.7
# experiment_noise_e = 0
# experiment_f_sky = 0.77
# l_max_scalars = 1200

# Planck experiment (Albrecht et al. 2006, or Smith et al. 2011, Table I)
# experiment_beam_fwhm = 9.2,7.1,5.0
# experiment_noise_t = 5.5,6,13
# experiment_noise_e = 0
# experiment_f_sky = 0.8
# l_max_scalars = 2000

# Planck experiment as in Yadav & Wandelt 2010, Fig. 7, lower right panel (remember to set l_max=3000)
# experiment_beam_fwhm = 5
# experiment_noise_t = 8
# experiment_noise_e = 8
# experiment_f_sky = 1
# l_max_scalars = 2500

---------------------------
----> 2nd order parameters
---------------------------

*****   Quadratic sources   *****

  Do you want to enable the quadratic sources at all?  If you set this to 'no', then the code is
going to solve the same differential system as in the first order case. In that case, this option
overrides all the other options involving quadratic sources (i.e. they will be set to 'no')
quadratic_sources = yes

  Do you want to include the quadratic sources for the Liouville operator?
quadratic_liouville = yes

  Do you want to include the quadratic sources for the photon-baryon collision term?
quadratic_collision = yes

  Do you want to include the time delay terms from the free streaming part of the Liouville operator?
These terms are of the form delta*metric and come from the free streaming part of Boltzmann equation.
They are suppressed for high multipoles by a 1/l factor.
include_time_delay_in_liouville = yes

  Do you want to include the redshift part of the Liouville operator?
include_redshift_in_liouville = yes

  Do you want to include the lensing part of the Liouville operator? These terms are also of the form
delta*metric, but are not suppressed.
include_lensing_in_liouville = yes


*****   Effects   *****

  Use perturbed recombination, as in Senatore, Tassev, Zaldarriaga 2009? (http//arxiv.org/abs/0812.3652)
perturbed_recombination = yes

	From which value of x should we start integrating the system to obtain delta_Xe? Should be larger than 34 to avoid
the discontinuity in the Q function. Note that x \equal eps / T, where eps is the ionization energy of the
hydrogen atom, and T is the temperature of the Universe (T \equal T_cmb / a).
perturbed_recombination_turnx = 36

	Use the analyitcal approximation in eq. 3.23 of the above paper? This corresponds to setting
delta_Xe as - 1/(3*Hc)*X_e_prime/X_e where X_e is the fraction of free electrons.
perturbed_recombination_use_approx = no

  Include polarization at second-order? If set to 'no' the code will not compute the polarisation hierarchy,
and consider all its multipoles to be vanishing. For now, this is inconsistent as, at first-order, polarisation
is included anyway.
polarization_second_order = yes

By default, we allow baryons and cold dark matter to have second-order pressure and anisotropic stresses.
Set the following flags to 'yes' in order to treat them as pressureless perfect fluids instead.
perfect_baryons = yes
perfect_cdm = yes


*****   First-order line of sight (LOS) sources   *****

The monopole, dipole and quadrupole of the LOS sources contain terms involving
metric only quantities (i.e. no matter multipoles), depending on the gauge.  The ISW
term is an example of such contributions.  As the metric variable do not usually vanish
after recombination, they should be integrated up to today.  To ignore the metric terms
in the LOS integration, set the following option to 'no'.  If both include_metric_in_los
and include_lensing_in_los are set to 'no', then the system will be solved only up to
the time of recombination. Note that turning the SW or the ISW effect on will automatically
turn off the include_metric_in_los_1st_order option. The standard CLASS behaviour is
recovered only when both SW and ISW are turned off but metric is turned on.
include_scattering_in_los_1st_order = yes
include_photon_monopole_in_los_1st_order = yes
include_metric_in_los_1st_order = yes

Should we include the Sachs-Wolfe and integrated Sachs-Wolfe effects at first
order? Note that turning on the SW or the ISW effect will automatically turn
off the include_metric_in_los_1st_order option.
include_sachs_wolfe_in_los_1st_order = no
include_integrated_sachs_wolfe_in_los_1st_order = no


*****   Second-order line of sight (LOS) sources   *****

use_test_source = no

include_pure_scattering_in_los_2nd_order = yes
include_quad_scattering_in_los_2nd_order = yes
include_metric_in_los_2nd_order = yes

include_quad_metric_in_los_2nd_order = no
include_time_delay_in_los_2nd_order = no
include_redshift_in_los_2nd_order = no
include_lensing_in_los_2nd_order = no

Abracadabra
use_delta_tilde_in_los = yes
use_delta_tilde_approx_in_los = no

Should we include the Sachs-Wolfe and integrated Sachs-Wolfe effects at second
order? Note that turning on the SW or the ISW effect will automatically turn
off the include_metric_in_los_2nd_order option.
include_sachs_wolfe_in_los_2nd_order = no
use_zhiqi_sw = no
include_integrated_sachs_wolfe_in_los_2nd_order = no
only_early_isw = no


************     Fisher parameters   *************

# Which multipoles should be considered in the sum that defines the Fisher matrix estimator?
fisher_l_min = 2
fisher_l_max = 20000




11) FIRST-ORDER Initial conditions.
# We added an extra kind of adiabatic initial conditions, the Ma & Bertschinger ones. If 'ic = ad_maberty',
# use the simple initial conditions in Ma & Berty for both synchronous and Newtonian gauge.
# If 'ic = ad_zero', CLASS shall use vanishing initial conditions.
# If 'ic = ad', we shall use the default adiabiatic initial conditions of CLASS.
ic = ad

Amplitude of the first order primordial curvature perturbation.  Default is 1.
This value is overridden by potential_ini when second order perturbations are
computed.
curvature_ini = 1


12) SECOND-ORDER initial conditions
Initial curvature at second order; used to fix adiabatic initial conditions.  This is equal to 1/2 D, where
D is the appearing in my Mathematica notebook.   This is equivalent to the C constant in Ma & Berty eq. 96, but it arises from
solving the equation for h(tau) at second order instead that the one at first order.  As in the first order case, D is the
integration costant associated with the tau^2 eigenmode, the only one we consider from the homogeneous solutions.
ic_2nd_order = ad
primordial_local_fnl_phi = 0

13) gauge in which calculations are performed: 'sync' or 'synchronous' or 'Synchronous' for synchronous, 'new' or 'newtonian' or 'Newtonian' for Newtonian/longitudinal gauge (default: set to synchronous)
gauge = newtonian

  If you use Newtonian gauge, you can choose between the Poisson and longitudinal equation to evolve the gravitational potential.
To use the former equation, specify 'poisson' or 'p'.  To use the latter, specify 'longitudinal' or 'l'
phi_prime_equation = P


14) We can save to disk the intermediate results of the computation of the second-order spectra.  These are the
line of sight sources and the transfer functions.  By saving them to disk, one spares a lot of RAM and speeds up
considerably subsequent computations with the same set of parameters.

Should  the intermediate (huge!) results of the code be stored to disk? If the user gave a previous run as first
argument of CLASS2, this parameter will be ignored.
# store_run = yes

Select what to store
store_sources = no
store_transfers = no
store_bispectra = no

Where should the data relevant to the current run be stored?
# run_directory = /Users/coccoinomane/data/song/runs/local_M1_L50

Should the date be appended to the run directory (y/n) ?
append_date = no

15) verbosity  &  debug parameters
perturbations_verbose = 1
perturbations2_verbose = 2
transfer_verbose = 1
transfer2_verbose = 2
bessels_verbose = 2
bessels2_verbose = 2
bispectra_verbose = 2
fisher_verbose = 2

# Store intermediate results in text files.  The filenames and ranges are controlled
# by the options below.  As everywhere in the code, index_k2 should be >= index_k1.
dump_debug_files = no
transfers_filename = out/early_transfers2.txt
quadsources_filename = out/quadsources.txt
quadliouville_filename = out/quadliouville.txt
quadcollision_filename = out/quadcollision.txt
index_k1_debug = 2
index_k2_debug = 1
index_k3_debug = 3
l_max_debug = 5



----------------------------------------------------
----> define which perturbations should be computed:
----------------------------------------------------

1) list of output spectra requested ('tCl' for temperature Cls, 'pCl' for polarization CLs, 'lCl' for lensing potential Cls, 'mPk' for total matter power spectrum P(k) infered from gravitational potential, 'mTk' for matter transfer functions for of each species). More than one letter allowed, can be attached or separated by arbitrary characters. Given this list, all non-zero auto-correlation and cross-correlation spectra will be automatically computed. Can be left blank if you do not want to evolve cosmological perturbations at all. (default: set to blanck, no perturbation calculation).  Note that there is also another kind of output, called early_transfers (or et, or ET) that should not be mixed with the other ones.  In this modality, the code will just solve the Boltzmann-Einstein system of differential equations, and output the early transfer functions if dump_debug_files is set to yes.

bispectra options:
tBi -> Full bispectra
tBi_equilateral_shape -> Compute the bispectra only for equilateral shapes
primary_Bi_local_model -> Compute only the primary bispectra for the local model
primary_Bi_equilateral_model -> Compute only the equilateral bispectra for the equilateral model

# output = tCl,zCl
# output = fnl
# output = primary_Bi_local_model
# output = primary_Bi_equilateral_model
# output = primary_Bi_orthogonal_model
# output = tBi
# output = et2
# output = tCl

2) if you want an estimate of the non-linear P(k), enter 'trg' for the Time Renormalization Group method; or 'one-loop' for the one-loop method as implemented in the TRG module; otherwise leave blank (default: blank, no non-linear P(k))

non linear = no

3) if you want the spectrum of lensed Cls, enter a word containing the letter 'y' or 'Y' (default: no lensed Cls)

lensing = no

4) list of modes ('s' for scalars, 'v' for vectors, 't' for tensors). More than one letter allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (default: set to 's')

modes = s

5) list of initial conditions for scalars ('ad' for adiabatic, 'bi' for baryon isocurvature, 'cdi' for CDM isocurvature, 'nid' for neutrino density isocurvature, 'niv' for neutrino velocity isocurvature). More than one of these allowed, can be attached or separated by arbitrary characters; letters can be small or capital. (defaut: set to 'ad')

# ic = ad



----------------------------------------------------
----> amount of information sent to standard output:
----------------------------------------------------

Increase integer values to make each module more talkative (default: all set to 0)

background_verbose = 1
thermodynamics_verbose = 1
primordial_verbose = 1
spectra_verbose = 1
nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1






----------------------------
----> background parameters:
----------------------------



1) Hubble parameter : either 'H0' in km/s/Mpc or 'h' (default: 'h' set to 0.704)

## CLASS
# h = 0.7

## CMBquick
# h =0.719



2) photon density: either 'T_cmb' in K or 'Omega_g' or 'omega_g' (default: 'T_cmb' set to 2.726)

## CLASS
# T_cmb = 2.726

## CMBquick
# T_cmb = 2.726

## CMBquick no neutrinos
# T_cmb = 3.08

3) baryon density: either 'Omega_b' or 'omega_b' (default: 'omega_b' set to 0.02253)

## CLASS
# Omega_b = 0.05

## CMBquick
# Omega_b = 0.043968

## Christian
# Omega_b = 0.045


5) density of cdm (cold dark matter): 'Omega_cdm' or 'omega_cdm' (default: 'omega_cdm' set to 0.1122)

## CLASS
# Omega_cdm = 0.25

## CMBquick
# Omega_cdm = 0.21253

## Christian
# Omega_cdm = 0.245

## Einstein-de Sitter run with Christian run
# Omega_cdm = 0.955

6) Include neutrinos?  Set to 3.04 if you want the standard LCDM picture.

## CLASS
# N_eff = 3.04

## CMBquick
# N_eff = 3.046

## No neutrinos
# N_eff = 0


7) curvature: 'Omega_k' (default: 'Omega_k' set to 0)

# Omega_k = 0.

8) cosmological constant / fluid with constant w and sound speed (can be used to model simple dark energy models): enter one parameter out of 'Omega_Lambda' or 'Omega_fld', and infer the other one so that (sum_i Omega_i) equals (1 + Omega_k) (default: 'Omega_fld' set to 0 and 'Omega_Lambda' to (1+Omega_k-Omega_tot))

# Omega_Lambda = 0.7
Omega_fld = 0

9) equation of state parameter and sound speed of the fluid

w_fld = -0.9
cs2_fld = 1



--------------------------------
----> thermodynamics parameters:
--------------------------------

1) primordial Helium fraction 'YHe', e.g. 0.25; if set to 'BBN' or 'bbn', will be inferred from Big Bang Nucleosynthesis (default: set to 'BBN')

YHe = 0.24
# YHe = BBN

2) 'recombination' algorithm set to 'RECFAST' or 'HyRec'

recombination = RECFAST

2) parametrization of reionization: 'reio_parametrization' must be one of 'reio_none' (no reionization), 'reio_camb' (like CAMB: one tanh() step for hydrogen reionization one for second helium reionization), 'reio_bins_tanh' (binned history x_e(z) with tanh() interpolation between input values), ... (default: set to 'reio_camb')

# reio_parametrization = reio_none
# reio_parametrization = reio_camb

3.a.) if 'reio_parametrization' set to 'reio_camb': enter one of 'z_reio' or 'tau_reio' (default: 'z_reio' set to 10.3), plus 'reionization_exponent', 'reionization_width', 'helium_fullreio_redshift', 'helium_fullreio_width' (default: set to 1.5, 1.5, 3.5, 0.5)

## CLASS
# tau_reio = 0.084522

## CMBquick
# tau_reio = 0.087

# z_reio = 10.


reionization_exponent = 1.5
reionization_width = 1.5
helium_fullreio_redshift = 3.5
helium_fullreio_width = 0.5

3.b.) if 'reio_parametrization' set to 'reio_bins_tanh': enter number of bins and list of z_i and xe_i defining the free electron density at the center of each bin. Also enter a dimensionless paramater regulating the sharpness of the tanh() steps, independently of the bin width; recommended sharpness is 0.3, smaller values will make steps too sharp, larger values will make the step very progressive but with discontinuity of x_e(z) derivative around z_i values. (default: set to 0, blank, blank, 0.3)

binned_reio_num = 3
binned_reio_z = 8,12,16
binned_reio_xe = 0.8,0.2,0.1
binned_reio_step_sharpness = 0.3




---------------------------------------------
----> define primordial perturbation spectra:
---------------------------------------------

1) primordial spectrum type ('analytic_Pk' for an analytic smooth function with amplitude, tilt, running, etc.; later, inflationary calculation will be added; analytic spectra with feature can also be added as a new type) (default: set to 'analytic_Pk')

P_k_ini type = analytic_Pk

2) parameters related to one of the primordial spectrum types (will only be read if they correspond to the type selected above)

2.a) for type 'analytic_Pk':

2.a.1) pivot scale in Mpc-1 (default: set to 0.002)

# k_pivot = 0.002

2.a.2) scalar adiabatic perturbations: curvature power spectrum value at pivot scale, tilt at the same scale, and tilt running (default: set 'A_s' to 2.42e-9, 'n_s' to 0.967, 'alpha_s' to 0)

## CLASS
# A_s = 2.3e-9
# n_s = 1.
# alpha_s = 0.

## CMBquick
# A_s = 2.41e-9
# n_s = 0.963
# alpha_s = 0.

## WMAP 7
# A_s = 2.42e-9
# n_s = 0.967
# alpha_s = 0.


2.a.3) isocurvature/entropy perturbations: for each mode xx ('xx' being one of 'bi', 'cdi', 'nid', 'niv', corresponding to baryon, cdm, neutrino density and neutrino velocity entropy perturbations), enter the entropy-to-curvature ratio f_xx, tilt n_xx and running alpha_xx, all defined at the pivot scale; e.g. f_cdi of 0.5 means S_cdi/R equal to one half and (S_cdi/R)^2 to 0.25 (default: set each 'f_xx' to 1, 'n_xx' to 1, 'alpha_xx' to 0)

f_bi = 1.
n_bi = 1.5

f_cdi=1.

f_nid=1.
n_nid=2.
alpha_nid= 0.01

etc.

2.a.4) cross-correlation between different adiabatic/entropy mode: for each pair (xx, yy) where 'xx' and 'yy' are one of 'ad', 'bi', 'cdi', 'nid', 'niv', enter the correlation c_xx_yy (parameter between -1 and 1, standing for cosDelta, the cosine of the cross-correlation angle), the tilt n_xx_yy of the function cosDelta(k), and its running alpha_xx_yy, all defined at the pivot scale. So, for a pair of fully correlated (resp. anti-correlated) modes, one should set (c_xx_yy, n_xx_yy, alpha_xx_yy) to (1,0,0) (resp. (-1,0,0) (default: set each 'c_xx_yy' to 0, 'n_xx_yy' to 0, 'alpha_xx_yy' to 0)

c_ad_bi = 0.5
#n_ad_bi = 0.1

c_ad_cdi = -1.

c_bi_nid = 1.
#n_bi_nid = -0.2
#alpha_bi_nid = 0.002

etc.

2.a.5) tensor mode (if any): tensor-to-scalar power spectrum ratio, tilt, running at the pivot scale (default: set 'r' to 1, 'n_t' to 0, 'alpha_t' to 0)

r = 1.
n_t = 0.
alpha_t = 0.

-------------------------------------
----> define format of final spectra:
-------------------------------------

1) maximum l 'l_max_scalars', 'l_max_tensors' in Cls for scalars/tensors (default: set 'l_max_scalars' to 2500, 'l_max_tensors' to 500)

# l_max_scalars = 3000
l_max_tensors = 500

2) maximum k in P(k), 'P_k_max_h/Mpc' in units of h/Mpc or 'P_k_max_1/Mpc' in units of 1/Mpc. If scalar Cls are also requested, a minimum value is automatically imposed (the same as in scalar Cls computation) (default: set to 0.1h/Mpc)

P_k_max_h/Mpc = 1.
#P_k_max_1/Mpc = 0.7

3) value(s) 'z_pk' of redshift(s) for P(k,z) output file(s); can be ordered arbitrarily, but must be separated by comas (default: set 'z_pk' to 0)

z_pk = 0
#z_pk = 0., 1.2, 3.5

4) if the code is interfaced with routines that need to interpolate P(k,z) at various values of (k,z), enter 'z_max_pk', the maximum value of z at which such interpolations are needed. (default: set to maximum value in above 'z_pk' input)

#z_max_pk = 10.

5) file name root 'root' for all output files (default: set 'root' to 'output/') (if Cl requested, written to '<root>cl.dat'; if P(k) requested, written to '<root>pk.dat'; plus similar files for scalars, tensors, pairs of initial conditions, etc.; if file with input parameters requested, written to '<root>parameters.ini')

root = output/

6) if you need Cls for the matter density autocorrelation or cross density-temperature correlation (option 'dCl'), enter here a description of the selection functions W(z) of each redshift bin; selection can be set to 'gaussian', then pass a list of N mean redshifts in growing order separated by comas, and finally 1 or N widths delta_z separated by comas (default: set to 'gaussian',1,0.1)

selection=gaussian
selection_mean = 1., 1.5, 2.0
selection_width = 0.1

8) do you want headers at the beginning of each output file (giving precisions on the output units/ format) ? If 'headers' set to something containing the letter 'y' or 'Y', headers written, otherwise not written (default: written)

headers = yes

9) in all output files, do you want columns to be normalized and ordered with the default CLASS definitions or with the CAMB definitions (often idential to the CMBFAST one) ? Set 'format' to either 'class', 'CLASS', 'camb' or 'CAMB' (default: 'class')

format = CLASS

10) if 'bessel file' set to something containing the letters 'y' or 'Y', the code tries to read bessel functions in a file; if the file is absent or not adequate, bessel functions are computed and written in a file. The file name is set by defaut to 'bessels.dat' but can be changed together with precision parameters: just set 'bessel_file_name' to '<name>' either here or in the precision parameter file. (defaut: 'bessel file' set to 'no' and bessel functions are always recomputed)

bessel file = no

11) Do you want to have all input/precision parameters which have been read written in file '<root>parameters.ini', and those not written in file '<root>unused_parameters' ? If 'write parameters' set to something containing the letter 'y' or 'Y', file written, otherwise not written (default: not written)

write parameters = no
k_output_values = 1e-6,0.001,0.1,1.0
